// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ================
 * Product (master)
 * ================ */
model Product {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  slug        String   @unique

  // category relation
  categoryId  String   @db.Uuid
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // optional listing image (we'll add gallery later)
  image       String?

  // explosion-proof technical/spec fields (extend as needed)
  type        String?
  protection  String?
  gasGroup    String?
  material    String?
  finish      String?
  rating      String?
  terminals   String?
  hardware    String?
  gasket      String?
  mounting    String?
  cableEntry  String?
  earthing    String?
  typeNumber  String?
  hsnCode     String?
  cutoutSize  String?
  plateSize   String?
  glass       String?
  wireGuard   String?
  size        String?
  rpm         Int?
  kW          Decimal? @db.Decimal(10,2)
  horsePower  Decimal? @db.Decimal(10,2)
  extraSpecs  Json?     // flexible catch-all: { "IP":"IP66", "tempClass":"T6" }

   includedComponents ProductComponentsOnProducts[]
   variants  ProductVariant[]  // ← add this

  // status & audit
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
  @@index([isActive])
  @@unique([categoryId, name]) // avoid duplicate names inside a category
}

model ProductComponents {
  id     String  @id @default(uuid()) @db.Uuid
  item   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProductComponentsOnProducts ProductComponentsOnProducts[]
}
model ProductComponentsOnProducts {
  id                  String  @id @default(uuid()) @db.Uuid

  productId           String  @db.Uuid
  product             Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  productComponentId  String  @db.Uuid
  productComponent    ProductComponents @relation(fields: [productComponentId], references: [id], onDelete: Restrict)

  quantity            Decimal? @db.Decimal(12,3)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([productId, productComponentId])
  @@index([productId])
}
model ProductVariant {
  id         String   @id @default(uuid()) @db.Uuid
  productId  String   @db.Uuid
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  subName    String             // e.g., "Single Entry M20", "2 Pole 16A"
  sku        String?  @unique
  typeNumber String?            // variant-specific code, if any
  attributes Json?              // { poles: 2, thread: "M20" } (optional)

  imageUrl   String?            // one image per variant (keep it simple)
  drawingUrl String?            // one PDF/PNG per variant (keep it simple)

  isDefault  Boolean @default(false)
  isActive   Boolean @default(true)
  sortOrder  Int     @default(0)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId, sortOrder])
  @@index([productId, isActive])
}


// ---------- Category ----------
model Category {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  image       String
  slug        String   @unique
  description String?
  isActive   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // One category → many products
  products    Product[]
}